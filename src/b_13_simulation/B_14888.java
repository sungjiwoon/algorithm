package b_13_simulation;
import java.io.*;
import java.util.Arrays;
/*
 * 연산자 끼워넣기 (실버 1)
 * 
 * dfs 이용
 * 순서 상관없는 조합 만들기 !! 외우자 쫌!!!!!!
 
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	512 MB	81494	42623	27158	49.492%
문제
N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.

우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.

예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.

1+2+3-4×5÷6
1÷2+3+4-5×6
1+2÷3×4-5+6
1÷2×3-4+5+6
식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.

1+2+3-4×5÷6 = 1
1÷2+3+4-5×6 = 12
1+2÷3×4-5+6 = 5
1÷2×3-4+5+6 = 7
N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

출력
첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.

예제 입력 1 
2
5 6
0 0 1 0
예제 출력 1 
30
30
 */
public class B_14888 {
	static int n;
	static int[] nums = new int[101], op = new int[101], op_copy = new int[101];
	static int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
	static boolean[] vis = new boolean[101];
	
	private static void dfs(int depth) {
		if (depth == n-1) {
			int sum = nums[0];
			for (int i = 0; i < n-1; i++) {
				
				if (op_copy[i] == 0) { //덧셈
					sum += nums[i+1];
				} else if (op_copy[i] == 1) {
					sum -= nums[i+1];
				} else if (op_copy[i] == 2) {
					sum *= nums[i+1];
				} else if (op_copy[i] == 3) {
					if (sum < 0) { //음수일 경우 
						sum *= -1;
						sum /= nums[i+1];
						sum *= -1;
					} else 	sum /= nums[i+1];	
				} 
				
			}
			
			max = Math.max(max, sum);
			min = Math.min(min, sum);
			return;
		}
		for (int i = 0; i < n-1; i++) {
			if (!vis[i]) {
				vis[i] = true;
				op_copy[depth] = op[i];
				dfs(depth+1);
				vis[i] = false;
			}
		}
	}
	public void work() throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		
		n = Integer.parseInt(br.readLine());
		String[] s = br.readLine().split(" ");
		for (int i = 0; i < n; i++) {
			nums[i] = Integer.parseInt(s[i]);
		}
		
		s = br.readLine().split(" ");
		int v = 0;
		for (int i = 0; i < 4; i++) {
			int k = Integer.parseInt(s[i]);
			for (int j = 0; j < k; j++) {
				op[v++] = i;
			}
		}
		
		//System.out.println(Arrays.toString(op));
		dfs(0);
		System.out.println(max);
		System.out.println(min);
		
		
	}
}
